package org.mars_group.gisimport.controller;

import com.netflix.appinfo.InstanceInfo;
import com.netflix.discovery.EurekaClient;
import it.geosolutions.geoserver.rest.GeoServerRESTPublisher;
import org.apache.commons.io.FileUtils;
import org.mars_group.core.ImportState;
import org.mars_group.gisimport.exceptions.GisImportException;
import org.mars_group.gisimport.util.GeoServerInstance;
import org.mars_group.metadataclient.MetadataClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.io.*;
import java.net.MalformedURLException;

import static org.junit.Assert.assertTrue;

@RestController
class FileController {

    private static final String uploadDir = "upload-dir";

    private final RestTemplate restTemplate;
    private final GeoServerImport gsImport;
    private final EurekaClient eurekaClient;
    private final GeoServerInstance geoServerInstance;

    @Autowired
    public FileController(RestTemplate restTemplate, GeoServerImport gsImport, EurekaClient eurekaClient, GeoServerInstance geoServerInstance) {
        this.restTemplate = restTemplate;
        this.gsImport = gsImport;
        this.eurekaClient = eurekaClient;
        this.geoServerInstance = geoServerInstance;
    }

    /**
     * import Geo files
     *
     * @param dataId   generated by file-controller
     * @param title    specified by user
     * @param filename the name of the file, the user uploaded
     * @return status message
     */
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/gis")
    public ResponseEntity<String> handleImport(@RequestParam String dataId, @RequestParam String title, @RequestParam String filename) {
        InstanceInfo instanceInfo = eurekaClient.getApplication("file-service").getInstances().get(0);
        String uri = "http://" + instanceInfo.getAppName() + "/files/";

        return restTemplate.execute(uri + dataId, HttpMethod.GET, null, response -> {
            try {
                String specificUploadDir = uploadDir + File.separator + dataId;

                saveFile(response.getBody(), specificUploadDir, filename);
                return handleUpload(title, filename, dataId, specificUploadDir);

            } catch (GisImportException e) {
                e.printStackTrace();
                return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }
        });
    }

    /**
     * Download files
     *
     * @param dataId id created during import
     * @param name   the name of the file specified at import.
     * @return relative uri to the file
     */
    @ResponseBody
    @RequestMapping(method = RequestMethod.GET, value = "/gis/{dataId}")
    public ResponseEntity<String> downloadFile(@PathVariable("dataId") String dataId, @RequestParam String name) throws MalformedURLException, GisImportException {
        GeoServerExport geoServerExport = new GeoServerExport(geoServerInstance);
        return new ResponseEntity<>(geoServerExport.getUri(dataId, name), HttpStatus.OK);
    }

    @ResponseBody
    @RequestMapping(method = RequestMethod.DELETE, value = "/gis/{dataId}")
    public ResponseEntity<String> deleteFile(@PathVariable("dataId") String dataId) throws MalformedURLException, GisImportException {
        GeoServerRESTPublisher publisher = geoServerInstance.getPublisher();
        boolean result = publisher.removeWorkspace(dataId, true);

        if (result) {
            return new ResponseEntity<>("deleted", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Error inside the geoserver", HttpStatus.INTERNAL_SERVER_ERROR);

        }
    }

    private ResponseEntity<String> handleUpload(String title, String filename, String dataId, String specificUploadDir) {
        MetadataClient metadataClient = MetadataClient.getInstance(restTemplate, eurekaClient);
        metadataClient.setState(dataId, ImportState.PROCESSING);

        try {
            // START THE IMPORT
            gsImport.handleImport(specificUploadDir, filename, dataId, title);
        } catch (GisImportException | MalformedURLException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }

        metadataClient.setState(dataId, ImportState.FINISHED);

        try {
            FileUtils.deleteDirectory(new File(specificUploadDir));
        } catch (IOException e) {
            e.printStackTrace();
        }

        return new ResponseEntity<>(dataId, HttpStatus.OK);
    }

    private void saveFile(InputStream file, String specificUploadDir, String filename) throws GisImportException {
        try {
            if (!new File(uploadDir).exists()) {
                assertTrue(new File(uploadDir).mkdir());
            }

            if (!new File(specificUploadDir).exists()) {
                assertTrue(new File(specificUploadDir).mkdir());
            }

            // save file
            File f = new File(specificUploadDir + File.separator + filename);
            BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(f));
            FileCopyUtils.copy(file, stream);
            stream.close();
        } catch (Exception e) {
            e.printStackTrace();
            throw new GisImportException(e.getMessage());
        }
    }

}
